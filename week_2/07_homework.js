/**
 * 문자열로 구성된 리스트 strings와, 정수 n이 주어졌을 때, 
 * 각 문자열의 인덱스 n번째 글자를 기준으로 오름차순 정렬하려 합니다. 
 * 예를 들어 strings가 ["sun", "bed", "car"]이고 n이 1이면 
 * 각 단어의 인덱스 1의 문자 "u", "e", "a"로 strings를 정렬합니다.
*/

/*
### 제한 조건
- strings는 길이 1 이상, 50이하인 배열입니다.
- strings의 원소는 소문자 알파벳으로 이루어져 있습니다.
- strings의 원소는 길이 1 이상, 100이하인 문자열입니다.
- 모든 strings의 원소의 길이는 n보다 큽니다.
- 인덱스 1의 문자가 같은 문자열이 여럿 일 경우, 사전순으로 앞선 문자열이 앞쪽에 위치합니다.
 */

let strings = ['sun', 'bed', 'car'];
const n = 1;

// 정렬하기 위해 strings를 sort 해줍니다.
// 문자가 같은 경우도 있어 확실하게 정렬하기 위해 Arrow Function 사용합니다.
// 비교하기 위해 a와 b를 매개변수로 사용합니다.
// 매개변수를 가지고 => {} 중괄호 안에 든 로직을 수행합니다.
let res = strings.sort((a, b) => {

    // strings 첫번째 값의 n 인덱스와 두번째 값의 n 인덱스의 크기를 비교합니다.
    // a[n]과 b[n]이 서로 같은지 확인합니다. (제한 조건)
    if( a[n] !== b[n] ) {
        // a[n]이 b[n]보다 크면 1, b[n]이 a[n]보다 크면 -1을 return 합니다.
        // 이렇게 하면 오름차순으로 정렬됩니다.
        return a[n] > b[n] ? 1: -1;
    }

    // 만약 같지 않다면 전체 문자열로 크기를 비교합니다.
    else {
        return a > b ? 1: -1;
    }
});


console.log(res);